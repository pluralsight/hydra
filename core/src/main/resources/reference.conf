application {
  name = "hydra"
  config.location = "/etc/hydra/application.conf"
}

hydra {
  schema.registry.url = "http://localhost:8081"
  schema.registry.url = ${?HYDRA_SCHEMA_REGISTRY_URL}
}

container {
  startup.timeout = 30s
  metrics.reporters.Slf4j.enabled = false
  http.interface = "0.0.0.0"
  http.interface = ${?CONTAINER_HTTP_INTERFACE}
  http.port = 8080
  http.port = ${?CONTAINER_HTTP_PORT}
}

akka {
  loglevel = DEBUG
  loglevel = ${?AKKA_LOG_LEVEL}
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logger-startup-timeout = 30s

  persistence {
    journal.plugin = "akka.persistence.journal.inmem"  //override this on prod using the application.conf file
  }

  extensions = ${?akka.extensions}[com.romix.akka.serialization.kryo.KryoSerializationExtension,
    de.heikoseeberger.constructr.ConstructrExtension, akka.cluster.pubsub.DistributedPubSub]

  actor {
    provider = cluster
    allow-java-serialization = off

    hydra-dispatcher {
      mailbox-type = "akka.dispatch.UnboundedDequeBasedMailbox"
    }

    log-dead-letters-during-shutdown = off

    deployment {
      #Do not remove this; if ingestors are not configured with a router under akka.deployment.actor,
      #a round-robin router is used with this configuration.
      default-ingestor-router {
        nr-of-instances = 2
        optimal-size-exploring-resizer {
          enabled = false
        }
        resizer {
          enabled = true
          lower-bound = 2
          upper-bound = 5
          pressure-threshold = 1
          rampup-rate = 0.2
          backoff-threshold = 0.3
          backoff-rate = 0.1
          messages-per-resize = 100
        }
      }
    }

    serializers {
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }

    serialization-bindings {
      "hydra.core.ingest.IngestionReport" = kryo
      "org.joda.time.DateTime" = kryo
      "hydra.core.ingest.HydraRequest" = kryo
      "scala.collection.immutable.$colon$colon" = kryo
      "hydra.core.transport.ValidationStrategy$Strict$" = kryo
      "hydra.core.transport.ValidationStrategy$Relaxed$" = kryo
      "hydra.core.transport.AckStrategy$NoAck$" = kryo
      "hydra.core.transport.AckStrategy$Replicated$" = kryo
      "hydra.core.transport.AckStrategy$Persisted$" = kryo
      "hydra.core.protocol.IngestorCompleted$" = kryo
      "hydra.core.protocol.IngestionError" = kryo
      "scala.Option" = kryo
      "scala.Some" = kryo
      "scala.None" = kryo
      "scala.collection.immutable.HashMap$HashTrieMap" = kryo
      "hydra.core.protocol.IngestorTimeout$" = kryo
      "hydra.core.protocol.InvalidRequest" = kryo
      "hydra.core.protocol.IngestorJoined$" = kryo
      "hydra.core.protocol.IngestorCompleted$" = kryo
      "hydra.core.protocol.IngestorIgnored$" = kryo
      "hydra.core.protocol.ValidRequest" = kryo
      "hydra.core.protocol.IngestorError" = kryo
      "hydra.core.protocol.RequestPublished$" = kryo
      "hydra.core.protocol.InitiateRequest" = kryo
      "hydra.core.connect.RequestReceived" = kryo
      "hydra.core.connect.RequestConfirmed" = kryo
      "scala.concurrent.duration.FiniteDuration" = kryo
      "java.util.concurrent.TimeUnit" = kryo,
      "scala.immutable.Map" = kryo
    }

    kryo {
      idstrategy = "automatic"
      buffer-size = 4096
      max-buffer-size = -1
      resolve-subclasses = true
      implicit-registration-logging = true
      post-serialization-transformations = "lz4"
      kryo-trace = false
      kryo-custom-serializer-init = "hydra.core.akka.KryoInit"
      classes = [
        "hydra.core.ingest.IngestionReport",
        "hydra.core.ingest.HydraRequest",
        "scala.collection.immutable.$colon$colon",
        "scala.collection.immutable.HashMap$HashTrieMap",
        "hydra.core.transport.ValidationStrategy$Strict$",
        "hydra.core.transport.ValidationStrategy$Relaxed$",
        "hydra.core.transport.AckStrategy$NoAck$",
        "hydra.core.transport.AckStrategy$Replicated$",
        "hydra.core.transport.AckStrategy$Persisted$",
        "hydra.core.protocol.IngestorCompleted",
        "hydra.core.protocol.IngestionError",
        "org.joda.time.Instant",
        "hydra.core.protocol.IngestorTimeout$",
        "hydra.core.protocol.InvalidRequest",
        "hydra.core.protocol.IngestorJoined$",
        "hydra.core.protocol.IngestorCompleted$",
        "hydra.core.protocol.IngestorIgnored$",
        "hydra.core.protocol.ValidRequest",
        "hydra.core.protocol.IngestorError",
        "hydra.core.protocol.RequestPublished$",
        "hydra.core.protocol.InitiateRequest",
        "scala.None$",
        "scala.Option",
        "scala.Some",
        "scala.collection.immutable.Nil$",
        "hydra.core.connect.RequestReceived",
        "hydra.core.connect.RequestConfirmed",
        "scala.concurrent.duration.FiniteDuration",
        "java.util.concurrent.TimeUnit",
        "scala.immutable.Map"
      ]
      mappings {
        "hydra.core.ingest.IngestionReport" = 32,
        "hydra.core.ingest.HydraRequest" = 34,
        "scala.collection.immutable.$colon$colon" = 35,
        "hydra.core.transport.ValidationStrategy$Strict$" = 39,
        "hydra.core.transport.ValidationStrategy$Relaxed$" = 40,
        "hydra.core.transport.AckStrategy$NoAck$" = 41,
        "hydra.core.transport.AckStrategy$Replicated$" = 42,
        "hydra.core.protocol.IngestorCompleted$" = 43,
        "scala.collection.immutable.HashMap$HashTrieMap" = 44,
        "hydra.core.protocol.IngestionError" = 45,
        "hydra.core.protocol.IngestorTimeout$" = 46,
        "hydra.core.protocol.InvalidRequest" = 47,
        "hydra.core.protocol.IngestorJoined$" = 48,
        "hydra.core.protocol.IngestorCompleted$" = 49,
        "hydra.core.protocol.IngestorIgnored$" = 50,
        "hydra.core.protocol.ValidRequest" = 51,
        "hydra.core.protocol.IngestorError" = 52,
        "hydra.core.protocol.RequestPublished$" = 53,
        "hydra.core.protocol.InitiateRequest" = 54,
        "scala.None$" = 55,
        "scala.Option" = 57,
        "scala.Some" = 56,
        "hydra.core.transport.AckStrategy$Persisted$" = 61,
        "hydra.core.connect.RequestReceived" = 70,
        "hydra.core.connect.RequestConfirmed" = 71,
        "scala.concurrent.duration.FiniteDuration" = 80,
        "java.util.concurrent.TimeUnit" = 81,
        "scala.immutable.Map" = 82
      }
    }
  }

  remote {
    artery {
      enabled = true
      enabled = ${?AKKA_REMOTE_ARTERY_ENABLED}
      canonical.hostname = "localhost" //this has to be set to a real IP address in production.
      canonical.hostname = ${?AKKA_REMOTE_ARTERY_CANONICAL_HOST_NAME}
      canonical.port = 25521
      canonical.port = ${?AKKA_REMOTE_ARTERY_CANONICAL_PORT}
    }
  }

  http {
    server.request-timeout = 5s
    server.remote-address-header = on
  }
}


constructr {
  #coordination.nodes = ["localhost:2181"] //if using zk; uncomment this out or redefine in application.conf
  #coordination.nodes = ${?HYDRA_ZOOKEEPER_QUORUM}  //if using zk; uncomment this out or redefine in application.conf

  //these apply if using Consul
  coordination {
    host = localhost
    port = 8500
  }

  coordination-timeout = 3 seconds  // Maximum response time for coordination service (e.g. etcd)
  join-timeout = 15 seconds // Might depend on cluster size and network properties
  max-nr-of-seed-nodes = 0          // Any nonpositive value means Int.MaxValue
  nr-of-retries = 2          // Nr. of tries are nr. of retries + 1
  refresh-interval = 30 seconds // TTL is refresh-interval * ttl-factor
  retry-delay = 3 seconds  // Give coordination service (e.g. etcd) some delay before retrying
  ttl-factor = 2.0        // Must be greater or equal 1 + ((coordination-timeout * (1 + nr-of-retries) + retry-delay * nr-of-retries)/ refresh-interval)!
  ignore-refresh-failures = false      // Ignore failures once machine is already in "Refreshing" state. It prevents from FSM being terminated due to exhausted number of retries.
}