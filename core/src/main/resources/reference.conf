application {
  name = "hydra"
  config.location = "/etc/hydra/application.conf"
}

hydra {
  schema.registry.url = "http://localhost:8081"
  schema.registry.url = ${?HYDRA_SCHEMA_REGISTRY_URL}
  schema.metadata.refresh.interval = 1 minute
  schema.metadata.refresh.interval = ${?HYDRA_SCHEMA_METADATA_REFRESH_INTERVAL}
  max.schemas.per.subject = 1000
  hydra.max.schemas.per.subject = ${?HYDRA_MAX_SCHEMAS_PER_SUBJECT}
  http.authenticator = hydra.common.auth.hydra.common.auth.NoSecurityAuthenticator
  http.authenticator = ${?HYDRA_HTTP_AUTHENTICATOR}
  http.interface = "0.0.0.0"
  http.interface = ${?CONTAINER_HTTP_INTERFACE}
  http.port = 8080
  http.port = ${?CONTAINER_HTTP_PORT}
}

akka {
  discovery {
    method = akka-dns // default.
    // Full list of discovery implementations is here:
    // https://developer.lightbend.com/docs/akka-management/current/discovery.html
  }

  loglevel = DEBUG
  loglevel = ${?AKKA_LOG_LEVEL}
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logger-startup-timeout = 30s

  persistence {
    journal.plugin = "akka.persistence.journal.inmem"  //override this on prod using the application.conf file
  }

  extensions = ${?akka.extensions}[com.romix.akka.serialization.kryo.KryoSerializationExtension]

  actor {
    allow-java-serialization = off

    hydra-dispatcher {
      mailbox-type = "akka.dispatch.UnboundedDequeBasedMailbox"
    }

    log-dead-letters-during-shutdown = off

    deployment {
      #Do not remove this; if ingestors are not configured with a router under akka.deployment.actor,
      #a round-robin router is used with this configuration.
      default-ingestor-router {
        nr-of-instances = 15
        optimal-size-exploring-resizer {
          enabled = false
        }
        resizer {
          enabled = true
          lower-bound = 5
          upper-bound = 20
          pressure-threshold = 1
          rampup-rate = 0.2
          backoff-threshold = 0.3
          backoff-rate = 0.1
          messages-per-resize = 100
        }
      }
    }

    serializers {
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }

    serialization-bindings {
      "hydra.core.ingest.IngestionReport" = kryo
      "org.joda.time.DateTime" = kryo
      "hydra.core.ingest.HydraRequest" = kryo
      "scala.collection.immutable.$colon$colon" = kryo
      "hydra.core.transport.ValidationStrategy$Strict$" = kryo
      "hydra.core.transport.ValidationStrategy$Relaxed$" = kryo
      "hydra.core.transport.AckStrategy$NoAck$" = kryo
      "hydra.core.transport.AckStrategy$Replicated$" = kryo
      "hydra.core.transport.AckStrategy$Persisted$" = kryo
      "hydra.core.protocol.IngestorCompleted$" = kryo
      "hydra.core.protocol.IngestionError" = kryo
      "hydra.core.transport.Transport$DestinationConfirmed" = kryo
      "hydra.core.akka.SchemaRegistryActor$SchemaRegistered" = kryo
      "scala.Option" = kryo
      "scala.Some" = kryo
      "scala.None" = kryo
      "scala.collection.immutable.HashMap$HashTrieMap" = kryo
      "hydra.core.protocol.IngestorTimeout$" = kryo
      "hydra.core.protocol.InvalidRequest" = kryo
      "hydra.core.protocol.IngestorJoined$" = kryo
      "hydra.core.protocol.Produce" = kryo
      "hydra.core.protocol.IngestorCompleted$" = kryo
      "hydra.core.protocol.IngestorIgnored$" = kryo
      "hydra.core.protocol.ValidRequest" = kryo
      "hydra.core.protocol.IngestorError" = kryo
      "hydra.core.protocol.RequestPublished$" = kryo
      "hydra.core.protocol.InitiateRequest" = kryo
      "scala.concurrent.duration.FiniteDuration" = kryo
      "java.util.concurrent.TimeUnit" = kryo
      "scala.collection.immutable.Map$Map1" = kryo
      "scala.collection.immutable.Map$Map2" = kryo
      "scala.collection.immutable.Map$Map3" = kryo
      "scala.collection.immutable.Map$Map4" = kryo
    }

    kryo {
      idstrategy = "automatic"
      buffer-size = 4096
      max-buffer-size = -1
      resolve-subclasses = true
      implicit-registration-logging = true
      kryo-trace = false
      kryo-trace = ${?AKKA_ACTOR_KRYO_KRYO_TRACE}
      kryo-custom-serializer-init = "hydra.core.akka.KryoInit"
      classes = [
        "hydra.core.ingest.IngestionReport",
        "hydra.core.ingest.HydraRequest",
        "scala.collection.immutable.$colon$colon",
        "scala.collection.immutable.HashMap$HashTrieMap",
        "hydra.core.transport.ValidationStrategy$Strict$",
        "hydra.core.transport.ValidationStrategy$Relaxed$",
        "hydra.core.transport.AckStrategy$NoAck$",
        "hydra.core.transport.AckStrategy$Replicated$",
        "hydra.core.transport.AckStrategy$Persisted$",
        "hydra.core.protocol.IngestorCompleted",
        "hydra.core.protocol.IngestionError",
        "org.joda.time.Instant",
        "hydra.core.protocol.IngestorTimeout$",
        "hydra.core.protocol.InvalidRequest",
        "hydra.core.protocol.IngestorJoined$",
        "hydra.core.protocol.Produce",
        "hydra.core.protocol.IngestorCompleted$",
        "hydra.core.protocol.IngestorIgnored$",
        "hydra.core.protocol.ValidRequest",
        "hydra.core.protocol.IngestorError",
        "hydra.core.protocol.RequestPublished$",
        "hydra.core.protocol.InitiateRequest",
        "scala.None$",
        "scala.Option",
        "scala.Some",
        "scala.collection.immutable.Nil$",
        "scala.concurrent.duration.FiniteDuration",
        "java.util.concurrent.TimeUnit",
        "scala.collection.immutable.Map$Map1",
        "scala.collection.immutable.Map$Map2",
        "scala.collection.immutable.Map$Map3",
        "scala.collection.immutable.Map$Map4",
        "hydra.core.transport.Transport$DestinationConfirmed",
        "hydra.core.akka.SchemaRegistryActor$SchemaRegistered"
      ]
      mappings {
        "hydra.core.ingest.IngestionReport" = 32,
        "hydra.core.ingest.HydraRequest" = 34,
        "scala.collection.immutable.$colon$colon" = 35,
        "hydra.core.transport.ValidationStrategy$Strict$" = 39,
        "hydra.core.transport.ValidationStrategy$Relaxed$" = 40,
        "hydra.core.transport.AckStrategy$NoAck$" = 41,
        "hydra.core.transport.AckStrategy$Replicated$" = 42,
        "hydra.core.protocol.IngestorCompleted$" = 43,
        "scala.collection.immutable.HashMap$HashTrieMap" = 44,
        "hydra.core.protocol.IngestionError" = 45,
        "hydra.core.protocol.IngestorTimeout$" = 46,
        "hydra.core.protocol.InvalidRequest" = 47,
        "hydra.core.protocol.IngestorJoined$" = 48,
        "hydra.core.protocol.Produce" = 86,
        "hydra.core.protocol.IngestorCompleted$" = 49,
        "hydra.core.protocol.IngestorIgnored$" = 50,
        "hydra.core.protocol.ValidRequest" = 51,
        "hydra.core.protocol.IngestorError" = 52,
        "hydra.core.protocol.RequestPublished$" = 53,
        "hydra.core.protocol.InitiateRequest" = 54,
        "scala.None$" = 55,
        "scala.Option" = 57,
        "scala.Some" = 56,
        "hydra.core.transport.AckStrategy$Persisted$" = 61,
        "scala.concurrent.duration.FiniteDuration" = 80,
        "java.util.concurrent.TimeUnit" = 81,
        "scala.collection.immutable.Map$Map1" = 82,
        "scala.collection.immutable.Map$Map2" = 83,
        "scala.collection.immutable.Map$Map3" = 84
        "scala.collection.immutable.Map$Map4" = 85,
        "hydra.core.transport.Transport$DestinationConfirmed" = 86,
        "hydra.core.akka.SchemaRegistryActor$SchemaRegistered" = 87
      }
    }
  }

  http {
    server.request-timeout = 5s
    server.remote-address-header = on
    routing.decode-max-size = 4m
  }

}
